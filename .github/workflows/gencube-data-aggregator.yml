name: Gencube Data Aggregator Pipeline

on:
  schedule:
    # Runs once daily at 00:00 KST (15:00 UTC)
    - cron: '0 15 * * *'
  workflow_dispatch:

jobs:
  data-aggregator:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: false

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y lftp
          pip install --upgrade pip
          pip install selenium

      - name: Create data-aggregator folder
        run: mkdir -p data-aggregator

      - name: Fetch FTP folder structure using ls -R (timeout after 10 minutes)
        env:
          FTP_SERVER: "ftp.ebi.ac.uk"
          FTP_PATH: "/pub/ensemblorganisms"
        run: |
          timeout 10m lftp -c "open $FTP_SERVER; cd $FTP_PATH; ls -R" \
            > data-aggregator/ensembl-beta_ftp_structure.txt || \
          { echo 'lftp command timed out after 10 minutes'; exit 1; }

      - name: Convert structure to JSON (excluding 'vep' folders and the 'test' folder)
        run: |
          python3 << 'EOF'
          import json

          def parse_ls_output(file_path):
              tree = {}
              current_path = []

              with open(file_path) as f:
                  for line in f:
                      line = line.rstrip("\n")
                      if not line:
                          continue
                      if line.endswith(":"):
                          hdr = line[:-1]
                          current_path = [] if hdr == "." else hdr.lstrip("./").split("/")
                          continue
                      parts = line.split()
                      if len(parts) < 9:
                          continue
                      name = " ".join(parts[8:])
                      is_dir = parts[0].startswith("d")
                      node = tree
                      for p in current_path:
                          node = node.setdefault(p, {})
                      node[name] = {} if is_dir else None
              return tree

          def remove_unwanted(tree):
              tree.pop("test", None)
              for sp, gm in list(tree.items()):
                  if isinstance(gm, dict):
                      for gid, ct in list(gm.items()):
                          if gid.startswith(("GCA_","GCF_")) and isinstance(ct, dict):
                              ct.pop("vep", None)
              return tree

          if __name__ == "__main__":
              t = parse_ls_output("data-aggregator/ensembl-beta_ftp_structure.txt")
              t = remove_unwanted(t)
              with open("data-aggregator/ensembl-beta_ftp_structure.json", "w") as out:
                  json.dump(t, out, indent=4)
              print("Directory structure saved.")
          EOF

      - name: Generate information file
        run: |
          python3 << 'EOF'
          import json

          with open("data-aggregator/ensembl-beta_ftp_structure.json") as f:
              data = json.load(f)

          ls_species = ["Species\tGenome"]
          ls_total   = ["Species\tGenome"]
          sp_count = gen_count = 0

          for species, genomes in data.items():
              # 'test' 과 NoneType 건너뛰기
              if species == "test" or not isinstance(genomes, dict):
                  continue
              # dict 타입일 때만 keys() 호출
              n = sum(1 for gid in genomes.keys() if gid.startswith(("GCA_","GCF_")))
              ls_species.append(f"{species}\t{n}")
              sp_count  += 1
              gen_count += n

          ls_total.append(f"{sp_count}\t{gen_count}")

          with open("data-aggregator/ensembl-beta_count_species.txt", "w") as sf:
              sf.write("\n".join(ls_species))
          with open("data-aggregator/ensembl-beta_count_total.txt", "w") as tf:
              tf.write("\n".join(ls_total))

          print("Count files saved.")
          EOF

      - name: Fetch SRA advanced index list using Selenium and save as JSON
        run: |
          python3 << 'EOF'
          import time, re, json
          from selenium import webdriver
          from selenium.webdriver.common.by import By
          from selenium.webdriver.support.ui import WebDriverWait, Select
          from selenium.webdriver.support import expected_conditions as EC

          options = webdriver.ChromeOptions()
          options.add_argument("--headless")
          driver = webdriver.Chrome(options=options)
          driver.get("https://www.ncbi.nlm.nih.gov/sra/advanced")
          time.sleep(3)

          fields = [
              ("Strategy","LS_STRATEGY"),
              ("Source","LS_SOURCE"),
              ("Platform","LS_PLATFORM"),
              ("Selection","LS_SELECTION"),
              ("Filter","LS_FILTER"),
              ("Properties","LS_PROPERTIES"),
          ]

          results = {}
          for label,var in fields:
              Select(driver.find_element(By.ID,"ff_0")).select_by_visible_text(label)
              time.sleep(1)
              btn = WebDriverWait(driver,10).until(
                  EC.element_to_be_clickable((By.XPATH,"//select[@id='ff_0']/following::a[@class='show_index'][1]"))
              )
              btn.click(); time.sleep(3)
              opts = driver.find_element(By.ID,"terms_list").find_elements(By.TAG_NAME,"option")
              results[var] = [
                  re.sub(r'\s*\(.*?\)','', o.text).strip().replace(' ','_')
                  for o in opts
              ]

          driver.quit()
          with open("data-aggregator/sra_advanced_index.json","w") as out:
              json.dump(results, out, indent=4)
          print("SRA index saved.")
          EOF

      - name: Commit and push changes
        run: |
          git config --global user.name "keun-hong"
          git config --global user.email "thsrms9216@gmail.com"
          if [ -n "$(git status --porcelain data-aggregator/)" ]; then
            git add data-aggregator/
            git commit -m "Update FTP structure, counts, and SRA index"
            git push https://snu-cdrc:${{ secrets.MY_PAT }}@github.com/snu-cdrc/gencube.git
          else
            echo "No changes to commit."
          fi
